https://www.youtube.com/watch?v=SLQrbjeVrk0&list=TLPQMTQwOTIwMjI56ehbYq4FXw&index=2
https://asciinema.org/connect/1e28283b-4399-491f-9fe0-771bd9cf9f56
https://pythontic.com/modules/socket/getservbyport#:~:text=The%20getservbyport%20%28%29function%20from%20Python%E2%80%99s%20socket%20module%20returns,the%20port%20numbers%2021%2C%20105%2C%2080%20and%20443.
https://subscription.packtpub.com/book/networking-and-servers/9781786463999/1/ch01lvl1sec06/finding-a-service-name-given-the-port-and-protocol#:~:text=If%20you%20know%20the%20port%20number%20of%20a,when%20calling%20this%20function.%20How%20to%20do%20it
import pyfiglet
import socket
import subprocess
import sys
import dns.resolver
from datetime import datetime
from colorama import init, Fore
from tqdm import tqdm


#Create splash screen
splash=pyfiglet.figlet_format("KyvernoScan")
print(splash)

#Get host IP address from domain name
tdomain= input("Enter a target's domain name to lookup: ")

#Print a banner about which domain we are looking up
print ("_" *60)
print ("Please wait, looking up the target's IP address", tdomain)
print ("_" *60)

#Check the date and time the scan was started
t1=datetime.now()

print("IP Address of host is", socket.gethostbyname(tdomain))

#Checking time again
t2 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t2 - t1

print ('Scan Completed In ', total)

#create port scanner
tserver = input("Enter a remote host to scan: ")
targetIP = socket.gethostbyname(tdomain)

#Check the date and time the scan was started
t3=datetime.now()

#Print banner for host we are about to scan
print ("_" *60)
print ("Please wait, scanning remote host for open ports", targetIP)
print ("_" *60)

try:
    #scan all ports on target ip
    for port in range (1, 100):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #set timeout so it doesn't run forever
            socket.setdefaulttimeout(0.5)
    
    #return list of open ports        
            result = s.connect_ex((targetIP, port))
            if result ==0:
                print ("Port {}[+]:     Open".format(port))
    #I decided I do not want to spend time finding closed prots           
            #if result !=0:
                #print ("Port {}[-]:     Closed".format(port))
            s.close()

#Create error in case ctrl + C is pressed
except KeyboardInterrupt:
    print ("Hostname could not be resovled. Exiting")
    sys.exit()
    
#Create error in case it doesn't respond
except socket.error:
    print ("Couldn't connect to server")
    sys.exit()
    
#Checking time again
t4 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t4 - t3

#Printing the information on the screen
print ("Scanning Completed In ", total)


#DNS Enumerator
#Print a nice banner with information on what we are doing next
print (" " *60)
print ("#" *60)
print ("     Now let's enumerate to find potential target systems")
print ("#" *60)

record_types = ['A', 'AAAA', 'NS', 'CNAME', 'MX']
try:
    domain = sys.argv[1]
except IndexError:
    print("Syntax Error - python3 demodns.py <domainname>")
    
for records in record_types:
    try:
        answer = dns.resolver.resolve(domain, records)
        print(f'{records} Records')
        print('-' *30)
        for server in answer:
            print(server.to_text()+ '\n')
    except dns.resolver.NoAnswer:
        pass
    except dns.resolver.NXDOMAIN:
        print(f'{domain} does not exist.')
        #quit()
    except KeyboardInterrupt:
        print("Quitting. Goodbye")
        #quit()
