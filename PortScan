import pyfiglet
import socket
import subprocess
import sys
import dns.resolver
from datetime import datetime
from colorama import init, Fore
from tqdm import tqdm

#Blank your screen
subprocess.call('clear', shell=True)

#Create banner

splash=pyfiglet.figlet_format("KyvernoScan")
print(splash)

#nslookup
#Get host IP address from domain name

dname= input("Enter a domain name to lookup: ")

#Print a nice banner with information on which domain we are looking up
print ("_" *60)
print ("Please wait, looking up IP address", dname)
print ("_" *60)

#Check the date and time the scan was started
t1=datetime.now()

print("IP Address of host is", socket.gethostbyname(dname))

#Checking time again
t2 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t2 - t1

print ('Scan Completed In , total)

#Print a nice banner with information on which host we are about to scan
print ("_" *60)
print ("Please wait, scanning remote host for open ports", remoteServerIP)
print ("_" *60)

#Using the range function to specify ports
#Also we will do error handling

try:
    for port in range (1,5000):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex((remoteServerIP, port))
                if result ==0:
                    print ("Port {}[+]:     Open".format(port))
                if result !=0:
                    print ("Port {}[-]:     Closed.format(port))
            sock.close()

except KeyboardInterrupt:
    print ("Hostname could not be resovled. Exiting")
    sys.exit()

except socket.error:
    print ("Couldn't connect to server")
    sys.exit()
    
#Checking time again
t2 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t2 - t1

#Printing the information on the screen
print ('Scanning Completed In , total)

#DNS Enumerator
#Print a nice banner with information on what we are doing next
print ("_" *60)
print ("Now let's enumerate")
print ("_" *60)

record_types = ['A', 'AAAA', 'NS', 'CNAME', 'MX', 'PTF', 'SOA', 'TXT']
    try:
        domain = sys.argv[1]
    except IndexError:
        print("Syntax Error - python3 demodns.py <domainname>")
        quit()
    for records in record_types:
    try:
        answer = dns.resolver.resolve(domain, records)
        print(f'{records} Records')
        print('-' *30)
        for server in answer:
            print(server.to_text()+ '\n')
    except dns.resolver.NoAnswer:
        pass
    except dns.resolver.NXDOMAIN:
        (f'{domain} does not exist.')
    except KeyboardInterrupt:
        print("Quitting. Goodbye")
        quit()




remoteServer = input("Enter a remote host to scan: ")
remoteServerIP = socket.gethostbyname(remoteServer)

#Check the date and time the scan was started
t1=datetime.now()






#result = dns.resolver.query(remoteServerIP)
#for val in result:
    #print('A Record: ",val.to_text())
        
#Checking time again
t2 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t2 - t1

print ('Scanning Completed In ', total)




#Print a nice banner with information on which host we are about to scan
print ("_" *60)
print ("Please wait, scanning remote host for open ports", remoteServerIP)
print ("_" *60)

#Using the range function to specify ports
#Also we will do error handling

try:
    for port in range (1,5000):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex((remoteServerIP, port))
                if result ==0:
                    print ("Port {}[+]:     Open".format(port))
                if result !=0:
                    print ("Port {}[-]:     Closed.format(port))
            sock.close()

except KeyboardInterrupt:
    print ("Hostname could not be resovled. Exiting")
    sys.exit()

except socket.error:
    print ("Couldn't connect to server")
    sys.exit()
    
#Checking time again
t2 = datetime.now()

#Calculate the difference in time to now how long the scan took
total = t2 - t1

#Printing the information on the screen
print ('Scanning Completed In , total)
